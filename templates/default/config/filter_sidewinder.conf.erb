filter {
  if [type] == "sidewinder" {
    grok {
        patterns_dir => '/opt/logstash/server/etc/patterns'
        match => [
          'message', '^%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}']
        add_field => [ "received_at", "%{@timestamp}" ]
        add_field => [ "received_from", "%{host}" ]
    }

    if !("_grokparsefailure" in [tags]) {
      #preserve the type field
      mutate { add_field => ["temp_type", "%{type}" ] }

      #split out our CSV key-value fields
      kv {
        field_split => ','
        source => 'syslog_message'
      }

      # revert the type field
      mutate { 
        rename_field => [ "type", "event_type" ]
        rename_field => [ "tmp_type", "type" ]
      }

      #replace the timestamp with the origin time from the FW (accept either v7 or v8 formats)
      date {
        match => [ 
          "date", "MMM  d HH:mm:ss YYYY z", "MMM dd HH:mm:ss YYYY z", "YYYY-MM-dd HH:mm:ss Z" ] 
      }

      #if we found a start time for a net session, transform that to a proper datetime field as well
      date {
        target => 'start_time'
        match => [ 
          "start_time", "E MMM d HH:mm:ss YYYY", "E MMM  d HH:mm:ss YYYY", "MMM  d HH:mm:ss YYYY z", "MMM dd HH:mm:ss YYYY z", "YYYY-MM-dd HH:mm:ss Z" 
        ] 
      }
      
      #geocode source IP field
      geoip {
        source => 'srcip'
        target => 'src_geoip'
<% if @geoip_database -%>
        database => '<%= @geoip_database %>'
<% end -%>
      }

      #geocode destination IP field
      geoip {
        source => 'dstip'
        target => 'dst_geoip'
<% if @geoip_database -%>
        database => '<%= @geoip_database %>'
<% end -%>
      }

      mutate {
        replace => [ 
          "host", 										"%{hostname}",
          "message", 									"%{syslog_message}" ]
        lowercase => [ 'host' ]
        rename => [
          'srcburb', 									'srczone',
          'dstburb', 									'dstzone' ]
        convert => [
          'srcport', 									'integer',
          'dstport', 									'integer',
          'protocol', 								'integer' ]
        remove_field => [ 						'date', 'message' ]
      }

      #clean up bytes out fields
      if [bytes_written_to_server] {
        convert => [ 'bytes_written_to_server', 'integer' ]
        add_field => [ 'bytes_sent', "%{bytes_written_to_server}" ]
      }

      #clean up bytes in fields
      if [bytes_written_to_client] {
        convert => [ 'bytes_written_to_client, 'integer' ]
        add_field => ['bytes_rcvd', "%{bytes_written_to_client}" ]
      }
    }

    #always remove the following extraneous fields
    mutate {
      remove_field => [ 
        "syslog_timestamp", 
        "syslog_hostname", 
        "syslog_message"]
    }
  }
}